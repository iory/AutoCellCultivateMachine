<launch>
    <!--BotのURDFモデルをパラメータサーバにロードする-->
    <arg name="mode" default="gazebo" />
    <arg name="model" default="$(find mycobot_320_moveit)/urdf/mycobot_320.urdf.xacro" />
    <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

    <!--空のワールドでGazeboを開始する-->
    <group if="$(eval mode=='gazebo')">
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="verbose" value="true" />
        </include>
        <!--GazeboでMyCobotを生成し，パラメータサーバからのその記述を受ける-->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
            args="-param robot_description -urdf -model myrobot" />
    </group>
    <include file="$(find mycobot_320_moveit)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true" />
        <arg name="info" value="true" />
        <arg name="debug" value="false" />
    </include>

    <group unless="$(eval mode=='gazebo')">
        <include file="$(find myrobot)/launch/mycobot_pro_control.launch" />
    </group>

    <!--コントローラをROSのパラメータサーバに読み込む-->
    <rosparam file="$(find myrobot)/yaml/mycobot_moveit_controllers.yaml" command="load" />
    <rosparam file="$(find myrobot)/yaml/joint_state_controller.yaml" command="load" />

    <!--コントローラ作成-->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
        args="arm_controller
	  joint_state_controller" />

    <!--robot_state_publisher:
    順運動学を計算し，tfメッセージを生成する-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find myrobot)/config/moveit_rviz.rviz"
    />

</launch>