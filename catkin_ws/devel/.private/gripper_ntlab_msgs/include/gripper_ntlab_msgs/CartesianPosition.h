// Generated by gencpp from file gripper_ntlab_msgs/CartesianPosition.msg
// DO NOT EDIT!


#ifndef GRIPPER_NTLAB_MSGS_MESSAGE_CARTESIANPOSITION_H
#define GRIPPER_NTLAB_MSGS_MESSAGE_CARTESIANPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gripper_ntlab_msgs
{
template <class ContainerAllocator>
struct CartesianPosition_
{
  typedef CartesianPosition_<ContainerAllocator> Type;

  CartesianPosition_()
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , rad(0.0)
    , buffer(0)
    , torque(false)  {
    }
  CartesianPosition_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , rad(0.0)
    , buffer(0)
    , torque(false)  {
  (void)_alloc;
    }



   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _rad_type;
  _rad_type rad;

   typedef uint8_t _buffer_type;
  _buffer_type buffer;

   typedef uint8_t _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianPosition_

typedef ::gripper_ntlab_msgs::CartesianPosition_<std::allocator<void> > CartesianPosition;

typedef boost::shared_ptr< ::gripper_ntlab_msgs::CartesianPosition > CartesianPositionPtr;
typedef boost::shared_ptr< ::gripper_ntlab_msgs::CartesianPosition const> CartesianPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator1> & lhs, const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.rad == rhs.rad &&
    lhs.buffer == rhs.buffer &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator1> & lhs, const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gripper_ntlab_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f9f2aa44155913dda5f4deaeec35ddd";
  }

  static const char* value(const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f9f2aa44155913dULL;
  static const uint64_t static_value2 = 0xda5f4deaeec35dddULL;
};

template<class ContainerAllocator>
struct DataType< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gripper_ntlab_msgs/CartesianPosition";
  }

  static const char* value(const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x1\n"
"float64 y1\n"
"float64 x2\n"
"float64 y2\n"
"float64 rad\n"
"uint8 buffer\n"
"bool torque\n"
;
  }

  static const char* value(const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.rad);
      stream.next(m.buffer);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gripper_ntlab_msgs::CartesianPosition_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "rad: ";
    Printer<double>::stream(s, indent + "  ", v.rad);
    s << indent << "buffer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buffer);
    s << indent << "torque: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIPPER_NTLAB_MSGS_MESSAGE_CARTESIANPOSITION_H
