// Generated by gencpp from file denso_cobotta_driver/RobotState.msg
// DO NOT EDIT!


#ifndef DENSO_COBOTTA_DRIVER_MESSAGE_ROBOTSTATE_H
#define DENSO_COBOTTA_DRIVER_MESSAGE_ROBOTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace denso_cobotta_driver
{
template <class ContainerAllocator>
struct RobotState_
{
  typedef RobotState_<ContainerAllocator> Type;

  RobotState_()
    : arm_no(0)
    , state_code(0)
    , state_subcode(0)  {
    }
  RobotState_(const ContainerAllocator& _alloc)
    : arm_no(0)
    , state_code(0)
    , state_subcode(0)  {
  (void)_alloc;
    }



   typedef uint32_t _arm_no_type;
  _arm_no_type arm_no;

   typedef uint32_t _state_code_type;
  _state_code_type state_code;

   typedef uint32_t _state_subcode_type;
  _state_subcode_type state_subcode;





  typedef boost::shared_ptr< ::denso_cobotta_driver::RobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::denso_cobotta_driver::RobotState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotState_

typedef ::denso_cobotta_driver::RobotState_<std::allocator<void> > RobotState;

typedef boost::shared_ptr< ::denso_cobotta_driver::RobotState > RobotStatePtr;
typedef boost::shared_ptr< ::denso_cobotta_driver::RobotState const> RobotStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::denso_cobotta_driver::RobotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::denso_cobotta_driver::RobotState_<ContainerAllocator1> & lhs, const ::denso_cobotta_driver::RobotState_<ContainerAllocator2> & rhs)
{
  return lhs.arm_no == rhs.arm_no &&
    lhs.state_code == rhs.state_code &&
    lhs.state_subcode == rhs.state_subcode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::denso_cobotta_driver::RobotState_<ContainerAllocator1> & lhs, const ::denso_cobotta_driver::RobotState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace denso_cobotta_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::denso_cobotta_driver::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::denso_cobotta_driver::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::denso_cobotta_driver::RobotState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "135adb9a590743fac44eca4fa4af87bc";
  }

  static const char* value(const ::denso_cobotta_driver::RobotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x135adb9a590743faULL;
  static const uint64_t static_value2 = 0xc44eca4fa4af87bcULL;
};

template<class ContainerAllocator>
struct DataType< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "denso_cobotta_driver/RobotState";
  }

  static const char* value(const ::denso_cobotta_driver::RobotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 arm_no\n"
"uint32 state_code\n"
"uint32 state_subcode\n"
;
  }

  static const char* value(const ::denso_cobotta_driver::RobotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_no);
      stream.next(m.state_code);
      stream.next(m.state_subcode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::denso_cobotta_driver::RobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::denso_cobotta_driver::RobotState_<ContainerAllocator>& v)
  {
    s << indent << "arm_no: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.arm_no);
    s << indent << "state_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state_code);
    s << indent << "state_subcode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state_subcode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DENSO_COBOTTA_DRIVER_MESSAGE_ROBOTSTATE_H
